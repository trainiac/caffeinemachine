{"version":3,"sources":["../../server/app.js"],"names":["getAppRoutes","app","routes","_router","stack","forEach","middleware","route","push","name","handle","handler","webpackConfig","logLevel","faviconFile","join","buildPath","console","log","use","json","urlencoded","extended","clientBuildPath","clientSrcPath","output","publicPath","static","htmlFile","req","res","sendFile"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAGA,MAAMA,eAAeC,OAAO;AAC1B,QAAMC,SAAS,EAAf;;AAEAD,MAAIE,OAAJ,CAAYC,KAAZ,CAAkBC,OAAlB,CAA0BC,cAAc;AAAE;AACxC,QAAIA,WAAWC,KAAf,EAAsB;AAAE;AACtBL,aAAOM,IAAP,CAAYF,WAAWC,KAAvB;AACD,KAFD,MAEO,IAAID,WAAWG,IAAX,KAAoB,QAAxB,EAAkC;AAAE;AACzCH,iBAAWI,MAAX,CAAkBN,KAAlB,CAAwBC,OAAxB,CAAgCM,WAAW;AACzC,YAAIA,QAAQJ,KAAZ,EAAmB;AACjBL,iBAAOM,IAAP,CAAYG,QAAQJ,KAApB;AACD;AACF,OAJD;AAKD;AACF,GAVD;;AAYA,SAAOL,MAAP;AACD,CAhBD;;kBAkBe,CAACD,GAAD,EAAMW,aAAN,EAAqBC,QAArB,KAAkC;AAC/C,QAAMC,cAAc,eAAKC,IAAL,CAAUH,cAAcI,SAAxB,EAAmC,aAAnC,CAApB;AACAC,UAAQC,GAAR,CAAa,wBAAsBJ,WAAY,GAA/C;AACAb,MAAIkB,GAAJ,CAAQ,4BAAQL,WAAR,CAAR;;AAEAG,UAAQC,GAAR,CAAa,uBAAqBL,QAAS,GAA3C;AACAZ,MAAIkB,GAAJ,CAAQ,sBAAON,QAAP,CAAR;;AAEAI,UAAQC,GAAR,CAAY,wBAAZ;AACAjB,MAAIkB,GAAJ,CAAQ,qBAAWC,IAAX,EAAR;AACAnB,MAAIkB,GAAJ,CACE,qBAAWE,UAAX,CAAsB;AACpBC,cAAU;AADU,GAAtB,CADF;;AAMAL,UAAQC,GAAR,CAAY,0BAAZ;AACAjB,MAAIkB,GAAJ,CAAQ,6BAAR;;AAEAF,UAAQC,GAAR,CAAY,2BAAZ;AACAD,UAAQC,GAAR,CAAa,+BAA6BN,cAAcW,eAAgB,GAAxE;AACAN,UAAQC,GAAR,CAAa,6BAA2BN,cAAcY,aAAc,GAApE;AACAP,UAAQC,GAAR,CAAa,gCAA8BN,cAAca,MAAd,CAAqBC,UAAW,GAA3E;AACAzB,MAAIkB,GAAJ,CACEP,cAAca,MAAd,CAAqBC,UADvB,EAEE,kBAAQC,MAAR,CAAef,cAAcW,eAA7B,CAFF;AAIA;;;AAGA,QAAMK,WAAW,eAAKb,IAAL,CAAUH,cAAcI,SAAxB,EAAmC,YAAnC,CAAjB;AACAC,UAAQC,GAAR,CAAa,oCAAkCU,QAAS,GAAxD;AACA3B,MAAIkB,GAAJ,CAAQ,CAACU,GAAD,EAAMC,GAAN,KAAc;AACpBA,QAAIC,QAAJ,CAAaH,QAAb;AACD,GAFD;;AAIAX,UAAQC,GAAR,CAAY,uBAAZ;AACAjB,MAAIkB,GAAJ,CAAQ,OAAR;;AAGAF,UAAQC,GAAR,CAAY,4BAAZ;AACAjB,MAAIkB,GAAJ,CAAQ,qBAAiBlB,GAAjB,CAAR;;AAEAgB,UAAQC,GAAR,CAAYlB,aAAaC,GAAb,CAAZ;AACA,SAAOA,GAAP;AACD,C","file":"app.js","sourcesContent":["import express from 'express'\nimport bodyParser from 'body-parser'\nimport cookieParser from 'cookie-parser'\nimport favicon from 'serve-favicon'\nimport logger from 'morgan'\nimport path from 'path'\n\nimport apiRoutes from './routes/api'\nimport getErrorHandlers from './routes/error'\n\n\nconst getAppRoutes = app => {\n  const routes = []\n\n  app._router.stack.forEach(middleware => { // eslint-disable-line no-underscore-dangle\n    if (middleware.route) { // routes registered directly on the app\n      routes.push(middleware.route)\n    } else if (middleware.name === 'router') { // router middleware\n      middleware.handle.stack.forEach(handler => {\n        if (handler.route) {\n          routes.push(handler.route)\n        }\n      })\n    }\n  })\n\n  return routes\n}\n\nexport default (app, webpackConfig, logLevel) => {\n  const faviconFile = path.join(webpackConfig.buildPath, 'favicon.ico')\n  console.log(`configuring favicon ${faviconFile}`)\n  app.use(favicon(faviconFile))\n\n  console.log(`configuring logger ${logLevel}`)\n  app.use(logger(logLevel))\n\n  console.log('configuring bodyParser')\n  app.use(bodyParser.json())\n  app.use(\n    bodyParser.urlencoded({\n      extended: false\n    })\n  )\n\n  console.log('configuring cookieParser')\n  app.use(cookieParser())\n\n  console.log('configuring static routes')\n  console.log(`webpack config: build path ${webpackConfig.clientBuildPath}`)\n  console.log(`webpack config: src path ${webpackConfig.clientSrcPath}`)\n  console.log(`webpack config: public path ${webpackConfig.output.publicPath}`)\n  app.use(\n    webpackConfig.output.publicPath,\n    express.static(webpackConfig.clientBuildPath)\n  )\n  // the public path is defined in webpack.config.js\n\n\n  const htmlFile = path.join(webpackConfig.buildPath, 'index.html')\n  console.log(`configuring html wildcard route ${htmlFile}`)\n  app.use((req, res) => {\n    res.sendFile(htmlFile)\n  })\n\n  console.log('configuring apiRoutes')\n  app.use('/api/', apiRoutes)\n\n\n  console.log('configuring error handlers')\n  app.use(getErrorHandlers(app))\n\n  console.log(getAppRoutes(app))\n  return app\n}\n\n"]}