{"version":3,"sources":["../../../server/routes/error/jsonValidation.js"],"names":["error","request","response","next","name","console","log","stack","status","BAD_REQUEST","responseData","message","jsonSchemaValidation","validations","json"],"mappings":";;;;;;kBAgBe,UAASA,KAAT,EAAgBC,OAAhB,EAAyBC,QAAzB,EAAmCC,IAAnC,EAAyC;AACtD,MAAIH,MAAMI,IAAN,KAAe,sBAAnB,EAA2C;AACzCC,YAAQC,GAAR,CAAYN,MAAMO,KAAlB;;AAEAL,aAASM,MAAT,CAAgB,0BAAWC,WAA3B;;AAEA,UAAMC,eAAe;AACnBC,eAAS,aADU;AAEnBC,4BAAsB,IAFH;AAGnBC,mBAAab,MAAMa,WAHA;AAInBb;AAJmB,KAArB;;AAOAE,aAASY,IAAT,CAAcJ,YAAd;AACD;;AAED,SAAOP,KAAKH,KAAL,CAAP;AACD,C;;AAjCD","file":"jsonValidation.js","sourcesContent":["import HttpStatus from 'http-status-codes'\n\n/**\n * Checks to see if the error was a JsonSchemaValidation and if so formats\n * a bad request response with the relevant information.\n *\n * @param {Object} error - The application error that occurred.\n * @param {Object} request - Express request object.\n * @param {Object} response - Express response object.\n * @param {Function} next - The middleware that is to be used if the error is not\n * JsonSchemaValidation\n *\n * @returns {Function|Undefined} If the error was a JsonSchemaValidation the function\n * will create an application response and the function will return nothing.  Otherwise,\n * the function will return the next middleware to be used.\n */\nexport default function(error, request, response, next) {\n  if (error.name === 'JsonSchemaValidation') {\n    console.log(error.stack)\n\n    response.status(HttpStatus.BAD_REQUEST)\n\n    const responseData = {\n      message: 'Bad Request',\n      jsonSchemaValidation: true,\n      validations: error.validations,\n      error\n    }\n\n    response.json(responseData)\n  }\n\n  return next(error)\n}\n"]}