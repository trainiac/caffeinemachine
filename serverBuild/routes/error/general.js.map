{"version":3,"sources":["../../../server/routes/error/general.js"],"names":["app","isDevelopment","get","error","request","response","next","status","INTERNAL_SERVER_ERROR","errorData","message","console","log","stack","json"],"mappings":";;;;;;kBAGe,UAASA,GAAT,EAAc;AAC3B,QAAMC,gBAAgBD,IAAIE,GAAJ,CAAQ,KAAR,MAAmB,aAAzC;;AAGF;;;;;;;;;;;;;;AAcE,SAAO,CAACC,KAAD,EAAQC,OAAR,EAAiBC,QAAjB,EAA2BC,IAA3B,KAAoC;AACzC,UAAMC,SAASJ,MAAMI,MAAN,IAAgB,0BAAWC,qBAA1C;AACA,UAAMC,YAAY;AAChBC,eAASP,MAAMO,OADC;AAEhB;AACA;AACAP,aAAOF,gBAAgBE,KAAhB,GAAwB,EAJf;AAKhBI;AALgB,KAAlB;;AAQAI,YAAQC,GAAR,CAAYT,MAAMU,KAAlB;AACAR,aAASE,MAAT,CAAgBA,MAAhB;AACAF,aAASS,IAAT,CAAcL,SAAd;AACD,GAbD;AAcD,C;;AAnCD","file":"general.js","sourcesContent":["import HttpStatus from 'http-status-codes'\n\n\nexport default function(app) {\n  const isDevelopment = app.get('env') === 'development'\n\n\n/**\n* Checks to see if the error was a JsonSchemaValidation and if so formats\n* a bad request response with the relevant information.\n*\n* @param {Object} error - The application error that occurred.\n* @param {Object} request - Express request object.\n* @param {Object} response - Express response object.\n* @param {Function} next - The middleware that is to be used if the error is not\n* JsonSchemaValidation\n*\n* @returns {Function|Undefined} If the error was a JsonSchemaValidation the function\n* will create an application response and the function will return nothing.  Otherwise,\n* the function will return the next middleware to be used.\n*/\n  return (error, request, response, next) => {\n    const status = error.status || HttpStatus.INTERNAL_SERVER_ERROR\n    const errorData = {\n      message: error.message,\n      // Development error handler will print stacktrace.\n      // Production error handler no stacktraces leaked to user\n      error: isDevelopment ? error : {},\n      status\n    }\n\n    console.log(error.stack)\n    response.status(status)\n    response.json(errorData)\n  }\n}\n"]}